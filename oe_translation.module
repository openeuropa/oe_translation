<?php
// phpcs:ignoreFile

/**
 * @file
 * OpenEuropa Translation module file.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\oe_translation\Access\JobAccessHandler;
use Drupal\oe_translation\Entity\JobItem;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\oe_translation\AlterableTranslatorInterface;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\oe_translation\ContentEntitySource;
use Drupal\oe_translation\LocalTranslatorInterface;
use Drupal\oe_translation\OeTranslationHandler;
use Drupal\oe_translation\TranslationModerationHandler;
use Drupal\tmgmt_content\DefaultFieldProcessor;

/**
 * Implements hook_theme().
 */
function oe_translation_theme($existing, $type, $theme, $path) {
  return [
    'local_translation_form_element_group' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for the Local Task item edit form.
 */
function oe_translation_form_tmgmt_local_task_item_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\tmgmt_local\LocalTaskItemInterface $task_item */
  $task_item = $form_state->getBuildInfo()['callback_object']->getEntity();
  $job = $task_item->getJobItem()->getJob();
  try {
    $translator_plugin = \Drupal::service('plugin.manager.tmgmt.translator')->createInstance($job->getTranslator()->getPluginId());
    if ($translator_plugin instanceof LocalTranslatorInterface) {
      $translator_plugin->localTaskItemFormAlter($form, $form_state);
    }
  }
  catch (PluginNotFoundException $exception) {
    return;
  }
}

/**
 * Implements hook_form_alter() for the Job item edit form.
 *
 * This is the form used to review the translation.
 */
function oe_translation_form_tmgmt_job_item_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\tmgmt\JobItemInterface $job_item */
  $job_item = $form_state->getBuildInfo()['callback_object']->getEntity();
  $job = $job_item->getJob();
  /** @var \Drupal\oe_translation\OeTranslationHandler $handler */
  $handler = \Drupal::entityTypeManager()->getHandler($job_item->getItemType(), 'oe_translation');
  $supported_translators = $handler->getSupportedTranslators();
  try {
    $plugin_id = $job->getTranslator()->getPluginId();
    $translator_plugin = \Drupal::service('plugin.manager.tmgmt.translator')->createInstance($plugin_id);
    if ($translator_plugin instanceof AlterableTranslatorInterface && in_array($plugin_id, $supported_translators)) {
      $translator_plugin->jobItemFormAlter($form, $form_state);
    }
  }
  catch (PluginNotFoundException $exception) {
    return;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function oe_translation_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type_id => $entity_type) {
    // Change the Job Item class with our own override.
    if ($entity_type_id === 'tmgmt_job_item') {
      $entity_type->setClass(JobItem::class);
    }

    // Change the access handler with our own for the Job entity.
    if ($entity_type_id === 'tmgmt_job') {
      $entity_type->setHandlerClass('access', JobAccessHandler::class);
    }

    // Add the OpenEuropa translation handler to all entity types.
    $entity_type->setHandlerClass('oe_translation', OeTranslationHandler::class);

    // Change the moderation handler if set to our own override.
    if (!$entity_type->hasHandlerClass('moderation')) {
      continue;
    }

    $entity_type->setHandlerClass('moderation', TranslationModerationHandler::class);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for the Local Task Item.
 */
function oe_translation_tmgmt_local_task_item_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $access = AccessResult::neutral();

  /** @var \Drupal\tmgmt\TranslatorInterface[] $translators */
  $translators = \Drupal::entityTypeManager()->getStorage('tmgmt_translator')->loadMultiple();
  foreach ($translators as $translator) {
    $plugin_id = $translator->getPluginId();
    try {
      $translator_plugin = \Drupal::service('plugin.manager.tmgmt.translator')->createInstance($plugin_id);
      if ($translator_plugin instanceof LocalTranslatorInterface) {
        $access = $access->orIf($translator_plugin->localTaskItemAccess($entity, $operation, $account))->addCacheableDependency($translator);
      }
    }
    catch (PluginNotFoundException $exception) {
      continue;
    }
  }

  return $access->addCacheableDependency(\Drupal::entityTypeManager()->getStorage('tmgmt_translator')->getEntityType()->getListCacheTags());
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function oe_translation_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if ($route_match->getRouteName() !== 'entity.tmgmt_local_task_item.canonical') {
    return;
  }

  /** @var \Drupal\tmgmt\TranslatorInterface[] $translators */
  $translators = \Drupal::entityTypeManager()->getStorage('tmgmt_translator')->loadMultiple();
  foreach ($translators as $translator) {
    $plugin_id = $translator->getPluginId();
    try {
      $translator_plugin = \Drupal::service('plugin.manager.tmgmt.translator')->createInstance($plugin_id);
      if ($translator_plugin instanceof LocalTranslatorInterface) {
        $translator_plugin->localTaskItemBreadcrumbAlter($breadcrumb, $route_match, $context);
      }
    }
    catch (PluginNotFoundException $exception) {
      continue;
    }
  }
}

/**
 * Implements template_preprocess_node().
 */
function oe_translation_preprocess_node(&$variables) {
  // Ensure that on the TMGMT preview page, we treat the node as the full page
  // display.
  if (\Drupal::service('current_route_match')->getRouteName() !== 'tmgmt_content.job_item_preview') {
    return;
  }

  $variables['page'] = TRUE;
}

/**
 * Implements hook_entity_base_field_info().
 */
function oe_translation_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'tmgmt_job_item') {
    $fields = [];
    // Add a field to the Job item to store the entity revision at the moment of
    // creation.
    $fields['item_rid'] = BaseFieldDefinition::create('integer')
      ->setLabel(new TranslatableMarkup('Item revision ID'))
      ->setSetting('unsigned', TRUE);
    // Add a field to the Job item to store the entity bundle being translated.
    // This is needed to be able to inspect field related info if the entity
    // itself gets deleted.
    $fields['item_bundle'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Item bundle'));
    return $fields;
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function oe_translation_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  // We don't want different translations to have different moderation states
  // so we make the moderation state field untranslatable.
  if ($entity_type->id() === 'content_moderation_state') {
    $fields['moderation_state']->setTranslatable(FALSE);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for the Node entity type.
 */
function oe_translation_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!in_array($operation, ['update'])) {
    // @todo, see if we should allow the deletion of translations.
    return AccessResult::neutral();
  }

  // We do not want node translations to be manually edited.
  // They need to be controlled from TMGMT.
  if (!$entity->isDefaultTranslation()) {
    return AccessResult::forbidden()->addCacheableDependency($entity);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_module_implements_alter().
 */
function oe_translation_module_implements_alter(&$implementations, $hook) {
  if ($hook !== 'field_info_alter') {
    return;
  }

  // Make sure that our hook_field_info_alter() fires before TMGMT's.
  if (!isset($implementations['oe_translation'])) {
    return;
  }

  unset($implementations['oe_translation']);
  $implementations['oe_translation'] = FALSE;
}

/**
 * Implements hook_field_info_alter().
 */
function oe_translation_field_info_alter(&$info) {
  if (isset($info['link'])) {
    // For the link field use the default field processor instead of the
    // specific Link one which doesn't allow the translation of the URI.
    $info['link']['tmgmt_field_processor'] = DefaultFieldProcessor::class;
  }
}

/**
 * Implements template_preprocess_local_translation_form_element_group().
 *
 * Template responsible for rendering the local translation form elements.
 */
function oe_translation_preprocess_local_translation_form_element_group(&$variables) {
  $element = $variables['element'];

  $header_title = $element['#field_name'];

  $variables['status_message_field'] = strtolower((string) $element['#parent_label'][0]);

  $table = [
    '#type' => 'table',
    '#attributes' => [
      'id' => $element['#ajaxid'],
      'class' => [$element['#zebra']],
    ],
    '#header' => [
      [
        'data' => $header_title,
        'colspan' => 4,
      ],
    ],
    '#rows' => [],
  ];

  $rows = [];
  $rows[] = [
    [
      'data' => $element['status'],
    ],
    [
      'data' => $element['source'],
    ],
    [
      'data' => $element['translation'],
    ],
    [
      'data' => $element['actions'],
    ],
  ];

  $table['#rows'] = $rows;

  $variables['element'] = $table;
}

/**
 * Implements tmgmt_source_plugin_info_alter().
 */
function oe_translation_tmgmt_source_plugin_info_alter(&$definitions) {
  if (isset($definitions['content'])) {
    // Override the plugin class with ours.
    $definitions['content']['class'] = ContentEntitySource::class;
    // Set the service to be used for determining the entity translation info.
    $definitions['content']['entity_translation_info'] = 'oe_translation.content_entity_source_translation_info';
  }
}

/**
 * Implements hook_tmgmt_translatable_fields_alter().
 */
function oe_translation_tmgmt_translatable_fields_alter(ContentEntityInterface $entity, &$translatable_fields) {
  // Prevent the moderation state to show up as a translatable field. It seems
  // it does even if we mark the base field as non-translatable.
  if (isset($translatable_fields['moderation_state'])) {
    unset($translatable_fields['moderation_state']);
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for the Page Header block.
 */
function oe_translation_block_view_oe_theme_helper_page_header_alter(array &$build, $block) {
  $build['#pre_render'][] = 'oe_translation_page_header_pre_render';
}

/**
 * Pre-render callback for the Page Header block alteration.
 *
 * This block is shipped by OpenEuropa Theme and we use this to remove the
 * language switcher from the page header on the entity preview page.
 *
 * @param array $build
 *   The built render array of the block.
 *
 * @return array
 *   The built render array of the block.
 */
function oe_translation_page_header_pre_render(array $build): array {
  if (\Drupal::service('current_route_match')->getRouteName() !== 'tmgmt_content.job_item_preview') {
    return $build;
  }

  if (isset($build['content']['#language_switcher'])) {
    unset($build['content']['#language_switcher']);
  }

  return $build;
}
