<?php

/**
 * @file
 * Primary module hooks for OpenEuropa Translation CDT mock module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\oe_translation_cdt\TranslationRequestCdt;

/**
 * Implements hook_entity_ENTITY_TYPE_view_alter().
 */
function oe_translation_cdt_mock_oe_translation_request_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() !== 'cdt') {
    return;
  }

  /** @var \Drupal\oe_translation_cdt\TranslationRequestCdtInterface $entity */
  if (!isset($build['meta'])) {
    return;
  }
  $row = &$build['meta']['#rows'][0];

  $operations = [];
  $statuses = [
    'COMP' => 'Completed',
    'INPR' => 'In progress',
    'CANC' => 'Cancelled',
    'PEND' => 'Pending approval',
    'UNDE' => 'Under quotation',
  ];
  foreach ($statuses as $status => $label) {
    $operations[$status] = [
      'title' => "$label (mock)",
      'url' => Url::fromRoute('oe_translation_cdt_mock.request_status', [
        'translation_request' => $entity->id(),
      ], [
        'query' => [
          'destination' => Url::fromRoute('<current>')->toString(),
          'status' => $status,
        ],
      ]),
    ];
  }

  if (!isset($row['cdt_operations'])) {
    $row['cdt_operations'] = [
      'data' => [
        '#type' => 'operations',
        '#links' => $operations,
      ],
    ];
  }
  else {
    $row['cdt_operations']['data']['#links'] += $operations;
  }
}

/**
 * Implement template_preprocess_table__remote_language_list().
 */
function oe_translation_cdt_mock_preprocess_table__remote_language_list(array &$variables) {
  $id = (string) $variables['attributes']['data-translation-request'];
  $request = TranslationRequestCdt::load($id);
  if (!$request || $request->bundle() !== 'cdt') {
    return;
  }

  foreach ($variables['rows'] as &$row) {
    $langcode = (string) $row['attributes']['hreflang'];

    $statuses = [
      'CMP' => 'Completed',
      'FLR' => 'Failed',
      'INP' => 'In progress',
      'CNC' => 'Cancelled',
      'TCN' => 'To be cancelled',
    ];
    foreach ($statuses as $status => $label) {
      $row['cells']['operations']['content']['#links'][] = [
        'title' => "$label (mock)",
        'url' => Url::fromRoute('oe_translation_cdt_mock.job_status', [
          'translation_request' => $id,
          'langcode' => $langcode,
        ], [
          'query' => [
            'destination' => Url::fromRoute('<current>')->toString(),
            'status' => $status,
          ],
        ]),
      ];
    }

  }
}
