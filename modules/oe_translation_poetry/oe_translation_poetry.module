<?php

/**
 * @file
 * OpenEuropa Translation Poetry module file.
 */

declare(strict_types = 1);

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\NodeInterface;
use Drupal\oe_translation_poetry\JobItemListBuilder;
use Drupal\oe_translation_poetry\Plugin\tmgmt\Translator\PoetryTranslator;
use Drupal\tmgmt\Entity\Job;
use Drupal\tmgmt\TranslatorInterface;

/**
 * Implements hook_poetry_entity_type_alter().
 */
function oe_translation_poetry_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
  $entity_type = $entity_types['tmgmt_job_item'] ?? NULL;
  if ($entity_type) {
    $entity_type->setHandlerClass('list_builder', JobItemListBuilder::class);
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function oe_translation_poetry_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'tmgmt_job') {
    $fields = [];
    $fields['poetry_request_id'] = BaseFieldDefinition::create('poetry_request_id')
      ->setLabel(t('The Poetry request ID'))
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'poetry_request_id_formatter',
        'weight' => 20,
      ]);

    $fields['poetry_state'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Poetry state'))
      ->setDescription(t('The poetry job state while the job is active.'))
      ->setSetting('allowed_values', [
        PoetryTranslator::POETRY_STATUS_ONGOING => t('Ongoing'),
        PoetryTranslator::POETRY_STATUS_TRANSLATED => t('Translated'),
      ]);

    $fields['poetry_request_date'] = BaseFieldDefinition::create('datetime')
      ->setLabel(t('The Poetry request date'))
      ->setDescription(t('The date when the translations are expected at the moment of the request.'));

    $fields['poetry_request_date_updated'] = BaseFieldDefinition::create('datetime')
      ->setLabel(t('The Poetry updated request date'))
      ->setDescription(t('The updated date when the translations are expected. Poetry can choose to update the request with a new expected delivery date.'));

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the TMGMT content overview form.
 */
function oe_translation_poetry_form_tmgmt_content_translate_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $poetry = \Drupal::service('plugin.manager.tmgmt.translator')->createInstance('poetry');
  $form['actions']['request']['#submit'] = [];
  $form['actions']['request']['#submit'][] = [$poetry, 'submitPoetryTranslationRequest'];

  // If we have jobs in the current job queue, we want to disable all the
  // checkboxes for choosing languages to translate. The user should first
  // either clear the existing jobs or finalize the request.
  /** @var \Drupal\oe_translation_poetry\PoetryJobQueueFactory $job_queue_factory */
  $job_queue_factory = \Drupal::service('oe_translation_poetry.job_queue_factory');
  $entity = $form_state->get('entity');
  $job_queue = $job_queue_factory->get($entity);
  if (!empty($job_queue->getAllJobs())) {
    // Remove validation since we just need to be redirected to the checkout
    // form regardless.
    $form['#validate'] = [];
    // Disable the checkboxes in the tableselect.
    foreach ($form['languages']['#options'] as $langcode => $option) {
      $form['languages'][$langcode] = [
        '#type' => 'checkbox',
        '#disabled' => TRUE,
      ];
    }
  }

  // If we are not talking about an ongoing request with accepted languages
  // there is nothing else we need to do.
  $build = $form_state->getBuildInfo()['args'][0];
  if (!isset($build['#accepted_languages'])) {
    return;
  }

  $accepted_languages = $build['#accepted_languages'];
  $translated_languages = $build['#translated_languages'];
  $completed_languages = $build['#completed_languages'];
  $languages = array_merge($accepted_languages, $translated_languages, $completed_languages);

  // If the user can make an update request, we need to ensure that all
  // languages that have been sent in the original request, are also included
  // in the update request. For this reason, we force-check the boxes of all
  // the relevant languages.
  // @see PoetryTranslator::contentTranslationOverviewAlter().
  if (isset($build['#update_request'])) {
    foreach (array_keys($languages) as $langcode) {
      $form['languages'][$langcode] = [
        '#type' => 'checkbox',
        '#disabled' => TRUE,
        '#value' => 1,
      ];
    }
  }

  // Add a button to request new languages. This can only happen while there
  // is an accepted ongoing request.
  if (!$accepted_languages) {
    return;
  }

  $form['actions']['request_new_languages'] = [
    '#type' => 'submit',
    '#button' => 'primary',
    '#value' => t('Add extra languages to the ongoing DGT request'),
    '#op' => 'add-languages',
    '#submit' => [
      [$poetry, 'submitPoetryTranslationRequest'],
    ],
  ];

  // When we submit the request to add new languages, we need to know which
  // are the languages that have already been submitted so we can remove them
  // from the request we send to Poetry.
  $form_state->set('ongoing_languages', $languages);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for the Job entity.
 */
function oe_translation_poetry_tmgmt_job_presave(EntityInterface $entity) {
  // If the state of the job is not active and the job was not cancelled, we
  // should clear the custom state value.
  /** @var \Drupal\tmgmt\JobInterface $entity */
  if ((int) $entity->getState() === Job::STATE_ABORTED && $entity->get('poetry_state')->value === PoetryTranslator::POETRY_STATUS_CANCELLED) {
    // Return if the job is being cancelled in Poetry.
    return;
  }

  if ((int) $entity->getState() !== Job::STATE_ACTIVE) {
    $entity->set('poetry_state', NULL);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for the TMGMT job items.
 */
function oe_translation_poetry_tmgmt_job_item_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\tmgmt\JobItemInterface $entity */
  $job = $entity->getJob();
  if (!$job->getTranslatorPlugin() instanceof PoetryTranslator) {
    return AccessResult::neutral();
  }

  if ($operation === 'abort') {
    // We don't want to abort jobs items.
    return AccessResult::forbidden();
  }

  if ($operation !== 'update') {
    return AccessResult::neutral();
  }

  if ($job->get('poetry_state')->value !== PoetryTranslator::POETRY_STATUS_TRANSLATED) {
    // Forbid access to job item updates if they have not been translated by
    // Poetry.
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for the Node confirm delete form.
 */
function oe_translation_poetry_form_node_confirm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // If the user is trying to delete a node, we should show a warning that
  // there are ongoing translation jobs associated with it.
  $node = \Drupal::service('current_route_match')->getParameter('node');
  if (!$node instanceof NodeInterface) {
    return;
  }

  $query = \Drupal::database()->select('tmgmt_job', 'job');
  $query->join('tmgmt_job_item', 'job_item', 'job.tjid = job_item.tjid');
  $query->fields('job', ['tjid', 'target_language']);
  $query->fields('job_item', ['tjiid']);
  $query->condition('job_item.item_id', $node->id());
  $query->condition('job.translator', 'poetry', '=');
  $query->condition('job.poetry_state', PoetryTranslator::POETRY_STATUS_ONGOING, '=');

  $result = $query->execute()->fetchAllAssoc('target_language');
  if (!$result) {
    return;
  }

  \Drupal::messenger()->addWarning(t('This node has ongoing translation jobs associated in Poetry. Ongoing requests cannot be automatically cancelled, please inform DGT about your cancellation request.'));
}

/**
 * Implements hook_ENTITY_TYPE_insert() for TMGMT translators.
 */
function oe_translation_tmgmt_translator_insert(TranslatorInterface $entity) {
  if ($entity->getPluginId() == 'poetry') {
    _oe_translation_tmgmt_reset_global_identifier_number($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for TMGMT translators.
 */
function oe_translation_tmgmt_translator_update(TranslatorInterface $entity) {
  if ($entity->getPluginId() == 'poetry') {
    _oe_translation_tmgmt_reset_global_identifier_number($entity);
  }
}

/**
 * Helper function to reset the Poetry global identifier number.
 *
 * @param \Drupal\tmgmt\TranslatorInterface $translator
 *   The translator that was saved.
 */
function _oe_translation_tmgmt_reset_global_identifier_number(TranslatorInterface $translator) {
  // After a Poetry translator is saved, check if the reset number checkbox
  // was checked and if so, set the value in the poetry client.
  /** @var \Drupal\oe_translation_poetry\Poetry $poetry_client */
  $poetry_client = \Drupal::service('oe_translation_poetry.client.default');
  $translator_settings = $translator->getSettings();
  if (!empty($translator_settings['number_reset'])) {
    $poetry_client->forceNewIdentifierNumber($translator_settings['number_reset']);
  }
}
