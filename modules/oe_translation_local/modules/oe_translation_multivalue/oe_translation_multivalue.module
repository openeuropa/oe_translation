<?php

/**
 * @file
 * Contains hook implementations for oe_translation_multivalue.
 */

declare(strict_types=1);

use Drupal\Component\Uuid\Uuid;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\oe_translation_multivalue\AddressTranslationMultivalueSourceFieldProcessor;
use Drupal\oe_translation_multivalue\DescriptionListTranslationMultivalueSourceFieldProcessor;
use Drupal\oe_translation_multivalue\FieldItemOverrides\AddressItemMultiple;
use Drupal\oe_translation_multivalue\FieldItemOverrides\DescriptionListItemMultiple;
use Drupal\oe_translation_multivalue\FieldItemOverrides\LinkDescriptionItemMultiple;
use Drupal\oe_translation_multivalue\FieldItemOverrides\LinkItemMultiple;
use Drupal\oe_translation_multivalue\FieldItemOverrides\StringItemMultiple;
use Drupal\oe_translation_multivalue\FieldItemOverrides\TimelineItemMultiple;
use Drupal\oe_translation_multivalue\FieldItemOverrides\TypedLinkItemMultiple;
use Drupal\oe_translation_multivalue\Form\LocalTranslationRequestForm;
use Drupal\oe_translation_multivalue\MultivalueTranslationSourceFieldProcessor;
use Drupal\oe_translation_multivalue\TimelineTranslationMultivalueSourceFieldProcessor;

/**
 * Implements hook_entity_type_alter().
 */
function oe_translation_multivalue_entity_type_alter(array &$entity_types) {
  if (!isset($entity_types['oe_translation_request'])) {
    return;
  }

  $entity_type = $entity_types['oe_translation_request'];
  $entity_type->setFormClass('local_translation', LocalTranslationRequestForm::class);
}

/**
 * Implements hook_element_info_alter().
 */
function oe_translation_multivalue_element_info_alter(array &$info) {
  if (isset($info['address'])) {
    $info['address']['#process'][] = 'oe_translation_multivalue_address_process';
  }
}

/**
 * Processor for the Address element.
 *
 * We need to add a hidden form value on the element with a default value
 * we set in the widget alter.
 *
 * @param array $element
 *   The element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $complete_form
 *   The form.
 *
 * @return array
 *   The element.
 */
function oe_translation_multivalue_address_process(array &$element, FormStateInterface $form_state, array &$complete_form) {
  if (!isset($element['#default_value']['translation_id'])) {
    return $element;
  }
  $element['translation_id'] = [
    '#type' => 'hidden',
    '#value' => $element['#default_value']['translation_id'],
  ];
  return $element;
}

/**
 * Get a list of the form widgets that should be altered.
 *
 * These are the widgets we alter the form of in order to put a hidden
 * translation_id form element with a random ID.
 *
 * @return string[]
 *   The widget IDs.
 */
function oe_translation_multivalue_widgets() {
  $field_types = oe_translation_multivalue_field_types();
  $options = [];
  $plugin_manager = \Drupal::service('plugin.manager.field.widget');
  foreach ($field_types as $field_type) {
    $options += $plugin_manager->getOptions($field_type);
  }

  return array_keys($options);
}

/**
 * Get a list of the field types we are altering.
 *
 * @todo make this extendable.
 *
 * @return string[]
 *   The field IDs.
 */
function oe_translation_multivalue_field_types() {
  return [
    'link',
    'address',
    'description_list_field',
    'link_description',
    'string',
    'timeline_field',
    'typed_link',
  ];
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function oe_translation_multivalue_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  $widgets = oe_translation_multivalue_widgets();
  $widget = $context['widget'];
  if (!in_array($widget->getPluginId(), $widgets)) {
    return;
  }
  $items = $context['items'];
  $property_definitions = $items->getFieldDefinition()->getItemDefinition()->getPropertyDefinitions();
  if (!isset($property_definitions['translation_id'])) {
    return;
  }

  if ($context['default']) {
    // We don't want this to run on the field config form when the field is
    // created and a default value may be set.
    return;
  }

  $id_generator = \Drupal::service('oe_translation_multivalue.translation_id_generator');
  $field_id = $items->getFieldDefinition()->getFieldStorageDefinition()->id();
  foreach ($items as $delta => $item) {
    // If the field delta doesn't yet have a translation ID, generate the next
    // one and set that. However, if we do generate a new one, we need to also
    // increment it here with each iteration because each delta needs to
    // receive a new one.
    $translation_id = $item->translation_id && Uuid::isValid($item->translation_id) ? $item->translation_id : NULL;
    if (!$translation_id) {
      $translation_id = $id_generator->generateTranslationUuid($field_id);
    }

    // For address, we have an exception because it uses a form element.
    if ($widget->getPluginId() === 'address_default') {
      $field_widget_complete_form['widget'][$delta]['address']['#default_value']['translation_id'] = $translation_id;
      continue;
    }
    $field_widget_complete_form['widget'][$delta]['translation_id'] = [
      '#type' => 'hidden',
      '#value' => $translation_id,
    ];
  }
}

/**
 * Implements hook_entity_presave().
 *
 * When we save a content entity that may have fields that contain the
 * translation_id column, check if by any chance an attempt is being made to
 * save them without one. If so, set a value. This can happen when entities
 * are created programmatically.
 */
function oe_translation_multivalue_entity_presave(EntityInterface $entity) {
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  $field_types = oe_translation_multivalue_field_types();

  $field_definitions = $entity->getFieldDefinitions();
  $fields = [];
  foreach ($field_definitions as $field_name => $field_definition) {
    if (in_array($field_definition->getType(), $field_types)) {
      $fields[] = $field_name;
    }
  }

  $id_generator = \Drupal::service('oe_translation_multivalue.translation_id_generator');

  foreach ($fields as $field) {
    if ($entity->get($field)->isEmpty()) {
      continue;
    }

    if (!in_array('translation_id', $entity->get($field)->getFieldDefinition()->getFieldStorageDefinition()->getPropertyNames())) {
      continue;
    }

    $field_id = $entity->getEntityTypeId() . '.' . $field;
    foreach ($entity->get($field) as $item) {
      if (!isset($item->getProperties()['translation_id'])) {
        continue;
      }

      if ($item->translation_id) {
        continue;
      }

      $item->translation_id = $id_generator->generateTranslationUuid($field_id);
    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function oe_translation_multivalue_field_info_alter(&$info) {
  if (isset($info['link'])) {
    $info['link']['class'] = LinkItemMultiple::class;
    $info['link']['oe_translation_source_field_processor'] = MultivalueTranslationSourceFieldProcessor::class;
  }

  if (isset($info['description_list_field'])) {
    $info['description_list_field']['class'] = DescriptionListItemMultiple::class;
    $info['description_list_field']['oe_translation_source_field_processor'] = DescriptionListTranslationMultivalueSourceFieldProcessor::class;
  }

  if (isset($info['timeline_field'])) {
    $info['timeline_field']['class'] = TimelineItemMultiple::class;
    $info['timeline_field']['oe_translation_source_field_processor'] = TimelineTranslationMultivalueSourceFieldProcessor::class;
  }

  if (isset($info['address'])) {
    $info['address']['class'] = AddressItemMultiple::class;
    $info['address']['oe_translation_source_field_processor'] = AddressTranslationMultivalueSourceFieldProcessor::class;
  }

  if (isset($info['typed_link'])) {
    $info['typed_link']['class'] = TypedLinkItemMultiple::class;
    $info['typed_link']['oe_translation_source_field_processor'] = MultivalueTranslationSourceFieldProcessor::class;
  }

  if (isset($info['string'])) {
    $info['string']['class'] = StringItemMultiple::class;
    $info['string']['oe_translation_source_field_processor'] = MultivalueTranslationSourceFieldProcessor::class;
  }

  if (isset($info['link_description'])) {
    $info['link_description']['class'] = LinkDescriptionItemMultiple::class;
    $info['link_description']['oe_translation_source_field_processor'] = MultivalueTranslationSourceFieldProcessor::class;
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function oe_translation_multivalue_config_schema_info_alter(&$definitions) {
  $field_types = oe_translation_multivalue_field_types();
  foreach ($field_types as $plugin_id) {
    $schema_id = 'field.storage_settings.' . $plugin_id;
    if (!isset($definitions[$schema_id])) {
      // If the schema doesn't exist already, we cannot add it as we get an
      // exception. For those, we need to define them in the schema yml.
      continue;
    }
    $definitions[$schema_id]['mapping']['translation_multivalue'] = [
      'type' => 'boolean',
      'label' => 'Translation multivalue',
    ];
  }
}
